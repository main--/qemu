#!/usr/bin/env bash
# group: rw auto quick
#
# Test qemu-img check on duplicated clusters
#
# Copyright (c) 2022 Virtuozzo International GmbH
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

# creator natalia.kuzmina@openvz.org

owner=alexander.ivanov@virtuozzo.com

seq=`basename $0`
echo "QA output created by $seq"

status=1    # failure is the default!

_cleanup()
{
    _cleanup_test_img
}
trap "_cleanup; exit \$status" 0 1 2 3 15

# get standard environment, filters and checks
. ./common.rc
. ./common.filter
. ./common.pattern

_supported_fmt parallels
_supported_proto file
_supported_os Linux

echo
echo "using sample corrupted image"
echo
_use_sample_img parallels-2-duplicated-cluster.bz2

CLUSTER_SIZE=65536

#read one cluster from original offset
$QEMU_IO -c "read -P 0x11 0 $CLUSTER_SIZE" "$TEST_IMG" | \
    _filter_qemu_io
#read from duplicated offset (data must be the same as on original offset)
$QEMU_IO -c "read -P 0x11 $((4 * CLUSTER_SIZE)) $CLUSTER_SIZE" "$TEST_IMG" | \
    _filter_qemu_io
#change data from original offset
$QEMU_IO -c "write -P 0x55 0 $CLUSTER_SIZE" "$TEST_IMG" | \
    _filter_qemu_io
#read from duplicated offset (data must be the same as on original offset)
$QEMU_IO -c "read -P 0x55 $((4 * CLUSTER_SIZE)) $CLUSTER_SIZE" "$TEST_IMG" | \
    _filter_qemu_io
echo
echo "check and repair the image for parallels format"
echo
_check_test_img -r all
echo

#read one cluster from original offset
$QEMU_IO -c "read -P 0x55 0 $CLUSTER_SIZE" "$TEST_IMG" | \
    _filter_qemu_io
#read copied data from new offset
$QEMU_IO -c "read -P 0x55 $((4 * CLUSTER_SIZE)) $CLUSTER_SIZE" "$TEST_IMG" | \
    _filter_qemu_io
#change data from original offset
$QEMU_IO -c "write -P 0x11 0 $CLUSTER_SIZE" "$TEST_IMG" | \
    _filter_qemu_io
#read from new offset (fail, now this data was left unchanged)
$QEMU_IO -c "read -P 0x11 $((4 * CLUSTER_SIZE)) $CLUSTER_SIZE" "$TEST_IMG" | \
    _filter_qemu_io

echo
echo
# success, all done
echo "*** done"
rm -f $seq.full
status=0
